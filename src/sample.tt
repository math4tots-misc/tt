
class Sample[$T] {
  let t $T;
}

static {
  let k = 178;
  print("I'm inside the static block!");
}

static native """
  console.log("I'm inside a native static block!");
"""

let someGlobal = 5;

fn main() Void {
  print("someGlobal = " + str(someGlobal));
  someGlobal = 17;
  print("someGlobal = " + str(someGlobal));
  foo(5);
  print("Hello world!");
  print(foo(12, 7));
  print(str(5.3));
  someFunction();
  print(malloc(Sample[Int]));
  // malloc(Int);
  print(typestr(Int));

  print([1, 2, 3]);

  print(1 == 1);
  print(!(1 == 1));

  let total = 0;
  for (let i = 0; i < 10000000; i += 1) {
    total =  total + i;
  }
  print("total = " + str(total));

  {
    let sampleInt = malloc(Sample[Int]);
    print("sampleInt.t = " + str(sampleInt.t));
    sampleInt.t = 15;
    print("sampleInt.t = " + str(sampleInt.t));

    let sampleStr = malloc(Sample[String]);
    print("sampleStr.t = " + str(sampleStr.t));
    sampleStr.t = "hoi";
    print("sampleStr.t = " + str(sampleStr.t));
  }

  {
    print(tuple(5));
    let t = tuple(124);
    print(t.x0);
    t.x0 = 5124;
    print(t.x0);

    print(tuple(5, 5.5, "hi"));

    print(tuple(1, 2) == tuple(1, 2));
  }

  return;
}

fn someFunction() Void {
  bbbb(5);
}

fn bbbb(x Int) Void {
  print(getStackTraceMessage());
}

fn foo(x Int) Void {
}

fn foo(x Int, y Int) Int {
  return add(x, y);
}
