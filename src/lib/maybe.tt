// maybe.tt
// A value that is allowed to be null.

class abstract Maybe;
class native Maybe[$T];

fn native new(Maybe[$T]) Maybe[$T]"""
  return {isNothing: true, value: null};
"""

fn native new(Maybe, t $T) Maybe[$T]"""
  return {isNothing: false, value: var_t};
"""

fn nothing($T) Maybe[$T] {
  return new(Maybe[$T]);
}

fn just(t $T) Maybe[$T] {
  return new(Maybe, t);
}

fn native isNothing(:Method, m Maybe[$T]) Bool"""
  return var_m.isNothing;
"""

fn isSomething(:Method, this Maybe[$T]) Bool {
  return !this.isNothing();
}

fn native get(:Method, m Maybe[$T]) $T"""
  if (var_m.isNothing) {
    throw new Error("Tried to get a Nothing");
  }
  return var_m.value;
"""

fn __eq__(a Maybe[$T], b Maybe[$T]) Bool {
  return a.isNothing() && b.isNothing() ||
         !a.isNothing() && !b.isNothing() && a.get() == b.get();
}

fn to(:Method, t $T, Maybe) Maybe[$T] {
  return new(Maybe, t);
}

fn repr(m Maybe[$T]) String {
  if (m.isNothing()) {
    return "new(" + typestr(Maybe[$T]) + ")";
  } else {
    return "new(Maybe," + repr(m.get()) + ")";
  }
}
