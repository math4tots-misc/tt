// tuple.tt

// TODO: Create a more elegant implementation using varargs
// I'm afraid that this todo might not be possible without some serious
// redesign of the language (e.g. memory model, being by value like C++
// instead of by reference/pointer for non-primitive types like Java).

// TODO: Better meta-programming facilities could *really* make implementing
// Tuple elegant. Implement those meta-programming facilities and apply
// them here.

//// Some dream code that involves meta-programming
// class Tuple[...Args] {
//   #for @i, @arg in enumerate(Args) #{
//     let #join("x", @i) @arg;
//   }
// }
//
// fn tuple(...args $Args) {
//   let t = malloc(Tuple[...$Args]);
//   #for @i, @arg in enumerate(args) {
//     #setattr(t, #addstr("x", @i), @arg);
//   }
// }

//// Possible way to use #instantiate
// fn instantiateReprForAll() Void {}
// fn instantiateReprForAll($X, ...Rest) Void {
//   #instantiate repr($X);
//   #instantiate instantiateReprForAll(...Rest);
// }
// fn repr(t Tuple[...Rest]) String {
//   #instantiate instantiateReprForAll(...Rest);
//   return nativeRepr(t);
// }

//// Another simple solution would be to use varargs to
// approximate tuples with linkedlists.
// The upside here is that the code will be very elegant even without
// having to build in a lot of new meta-programming facilities.
// The downside is performance, and also complexity of the resulting
// javascript structure.

//// For now, I will copy and paste the desired data structure
// for each level of tuple size. It'll be really long and reptitive, but
// the result will be very simple and easy to understand.
// Another disadvantage is that this approach puts an arbitrary
// upper limit to Tuple size.

class Tuple[] {}
class Tuple[$X0] {
  let x0 $X0;
}
class Tuple[$X0, $X1] {
  let x0 $X0;
  let x1 $X1;
}
class Tuple[$X0, $X1, $X2] {
  let x0 $X0;
  let x1 $X1;
  let x2 $X2;
}
class Tuple[$X0, $X1, $X2, $X3] {
  let x0 $X0;
  let x1 $X1;
  let x2 $X2;
  let x3 $X3;
}
class Tuple[$X0, $X1, $X2, $X3, $X4] {
  let x0 $X0;
  let x1 $X1;
  let x2 $X2;
  let x3 $X3;
  let x4 $X4;
}
class Tuple[$X0, $X1, $X2, $X3, $X4, $X5] {
  let x0 $X0;
  let x1 $X1;
  let x2 $X2;
  let x3 $X3;
  let x4 $X4;
  let x5 $X5;
}
class Tuple[$X0, $X1, $X2, $X3, $X4, $X5, $X6] {
  let x0 $X0;
  let x1 $X1;
  let x2 $X2;
  let x3 $X3;
  let x4 $X4;
  let x5 $X5;
  let x6 $X6;
}
class Tuple[$X0, $X1, $X2, $X3, $X4, $X5, $X6, $X7] {
  let x0 $X0;
  let x1 $X1;
  let x2 $X2;
  let x3 $X3;
  let x4 $X4;
  let x5 $X5;
  let x6 $X6;
  let x7 $X7;
}
class Tuple[$X0, $X1, $X2, $X3, $X4, $X5, $X6, $X7, $X8] {
  let x0 $X0;
  let x1 $X1;
  let x2 $X2;
  let x3 $X3;
  let x4 $X4;
  let x5 $X5;
  let x6 $X6;
  let x7 $X7;
  let x8 $X8;
}
class Tuple[$X0, $X1, $X2, $X3, $X4, $X5, $X6, $X7, $X8, $X9] {
  let x0 $X0;
  let x1 $X1;
  let x2 $X2;
  let x3 $X3;
  let x4 $X4;
  let x5 $X5;
  let x6 $X6;
  let x7 $X7;
  let x8 $X8;
  let x9 $X9;
}


fn tuple() Tuple[] {
  return malloc(Tuple[]);
}
fn tuple(x0 $X0) Tuple[$X0] {
  final t = malloc(Tuple[$X0]);
  t.x0 = x0;
  return t;
}
fn tuple(x0 $X0, x1 $X1) Tuple[$X0, $X1] {
  final t = malloc(Tuple[$X0, $X1]);
  t.x0 = x0;
  t.x1 = x1;
  return t;
}
fn tuple(x0 $X0, x1 $X1, x2 $X2) Tuple[$X0, $X1, $X2] {
  final t = malloc(Tuple[$X0, $X1, $X2]);
  t.x0 = x0;
  t.x1 = x1;
  t.x2 = x2;
  return t;
}


fn equals(a Tuple[], b Tuple[]) Bool {
  return true;
}
fn equals(a Tuple[$X0], b Tuple[$X0]) Bool {
  return a.x0 == b.x0;
}
fn equals(a Tuple[$X0, $X1], b Tuple[$X0, $X1]) Bool {
  return a.x0 == b.x0 &&
         a.x1 == b.x1;
}
// fn equals(a Tuple[...Args], b Tuple[...Args]) Bool {
//   #error "Not yet implemented";
// }


fn lessThan(a Tuple[], b Tuple[]) Bool {
  return false;
}
fn lessThan(a Tuple[$X0], b Tuple[$X0]) Bool {
  return a.x0 < b.x0;
}


fn repr(t Tuple[$X0]) String {
  return "tuple(" +
         repr(t.x0) + ")";
}
fn repr(t Tuple[$X0, $X1]) String {
  return "tuple(" +
         repr(t.x0) + "," +
         repr(t.x1) + ")";
}
fn repr(t Tuple[$X0, $X1, $X2]) String {
  return "tuple(" +
         repr(t.x0) + "," +
         repr(t.x1) + "," +
         repr(t.x2) + ")";
}
fn repr(t Tuple[$X0, $X1, $X2, $X3]) String {
  return "tuple(" +
         repr(t.x0) + "," +
         repr(t.x1) + "," +
         repr(t.x2) + "," +
         repr(t.x3) + ")";
}

