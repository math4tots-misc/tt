// tuple.tt

// TODO: Better meta-programming facilities could *really* make implementing
// Tuple elegant. Implement those meta-programming facilities and apply
// them here.

//// Some dream code that involves meta-programming
// class Tuple[...Args] {
//   #for @i, @arg in enumerate(Args) #{
//     let #join("x", @i) @arg;
//   }
// }
//
// fn tuple(...args $Args) {
//   let t = malloc(Tuple[...$Args]);
//   #for @i, @arg in enumerate(args) {
//     #setattr(t, #addstr("x", @i), @arg);
//   }
// }

//// Possible way to use #instantiate
// fn instantiateReprForAll() Void {}
// fn instantiateReprForAll($X, ...Rest) Void {
//   #instantiate repr($X);
//   #instantiate instantiateReprForAll(...Rest);
// }
// fn repr(t Tuple[...Rest]) String {
//   #instantiate instantiateReprForAll(...Rest);
//   return nativeRepr(t);
// }

//// Another simple solution would be to use varargs to
// approximate tuples with linkedlists.
// The upside here is that the code will be very elegant even without
// having to build in a lot of new meta-programming facilities.
// The downside is performance, and also complexity of the resulting
// javascript structure.

//// For now, I will copy and paste the desired data structure
// for each level of tuple size. It'll be really long and reptitive, but
// the result will be very simple and easy to understand.
// Another disadvantage is that this approach puts an arbitrary
// upper limit to Tuple size.

// I've decided to use the varargs/linkedlist approach.
// Perhaps in the future I could do a contiguous memory tuple
// with more mature meta-programming tools.

class native Tuple;  // abstract
class Tuple[] {}
class Tuple[$Head, ...Rest] {
  let head $Head;  // car
  let tail Tuple[...Rest];  // cdr
}

fn new(Tuple) Tuple[] {
  return malloc(Tuple[]);
}

fn new(Tuple, a $A, ...rest Rest) Tuple[$A, ...Rest] {
  return malloc(Tuple[$A, ...Rest], a, new(Tuple, ...rest));
}

fn tuple(...args Args) Tuple[...Args] {
  return new(Tuple, ...args);
}

fn get(:Method, a Tuple[$A0, ...Rest], :0) $A0 {
  return a.head;
}

fn get(:Method, a Tuple[$A0, $A1, ...Rest], :1) $A1 {
  return a.tail.get(:0);
}

fn get(:Method, a Tuple[$A0, $A1, $A2, ...Rest], :2) $A2 {
  return a.tail.get(:1);
}

fn get(:Method, a Tuple[$A0, $A1, $A2, $A3, ...Rest], :3) $A3 {
  return a.tail.get(:2);
}

fn get(:Method, a Tuple[$A0, $A1, $A2, $A3, $A4, ...Rest], :4) $A4 {
  return a.tail.get(:3);
}

fn get(:Method, a Tuple[$A0, $A1, $A2, $A3, $A4, $A5, ...Rest], :5) $A5 {
  return a.tail.get(:4);
}

fn get(:Method, a Tuple[$A0, $A1, $A2, $A3, $A4, $A5, $A6, ...Rest], :6) $A6 {
  return a.tail.get(:5);
}

fn get(:Method, a Tuple[$A0, $A1, $A2, $A3, $A4, $A5, $A6, $A7, ...Rest], :7)
    $A7 {
  return a.tail.get(:6);
}

fn set(:Method, a Tuple[$A0, ...Rest], :0, v $A0) $A0 {
  return a.head = v;
}

fn set(:Method, a Tuple[$A0, $A1, ...Rest], :1, v $A1) $A1 {
  return a.tail.set(:0, v);
}

fn set(:Method, a Tuple[$A0, $A1, $A2, ...Rest], :2, v $A2) $A2 {
  return a.tail.set(:1, v);
}

fn set(:Method, a Tuple[$A0, $A1, $A2, $A3, ...Rest], :3, v $A3) $A3 {
  return a.tail.set(:2, v);
}

fn set(:Method, a Tuple[$A0, $A1, $A2, $A3, $A4, ...Rest], :4, v $A4) $A4 {
  return a.tail.set(:3, v);
}

fn set(:Method, a Tuple[$A0, $A1, $A2, $A3, $A4, $A5, ...Rest], :5, v $A5) $A5 {
  return a.tail.set(:4, v);
}

fn set(:Method, a Tuple[$A0, $A1, $A2, $A3, $A4, $A5, $A6, ...Rest], :6, v $A6) $A6 {
  return a.tail.set(:5, v);
}

fn set(:Method, a Tuple[$A0, $A1, $A2, $A3, $A4, $A5, $A6, $A7, ...Rest], :7)
    $A7 {
  return a.tail.get(:6);
}

fn __eq__(a Tuple[], b Tuple[]) Bool {
  return true;
}

fn __eq__(a Tuple[$X, ...Rest], b Tuple[$X, ...Rest]) Bool {
  return a.head == b.head && a.tail == b.tail;
}

fn __lt__(a Tuple[], b Tuple[]) Bool {
  return false;
}

fn __lt__(a Tuple[$X, ...Rest], b Tuple[$X, ...Rest]) Bool {
  return a.head < b.head || a.head == b.head && a.tail < b.tail;
}

fn innerRepr(:Method, t Tuple[$X]) String {
  return repr(t.get(:0));
}

fn innerRepr(:Method, t Tuple[$X, ...Rest]) String {
  return repr(t.get(:0)) + ", " + t.tail.innerRepr();
}

fn repr(t Tuple[$X0]) String {
  return "tuple(" + t.innerRepr() + ")";
}
