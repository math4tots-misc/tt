// lambda.tt

class native Lambda[$Return, ...Args];

//// Should I have done something like this?
// class native Lambda[Args[...Args], $Return];


fn native call(f Lambda[$R, ...Args], ...args Args) $R"""eval
    context => {
  let argsstr = "(stack";
  const func = context.getCurrentFunction();
  for (let i = 1; i < func.args.length; i++) {
    argsstr += ", var_" + func.args[i][0];
  }
  argsstr += ")";
  return "\\n  return var_f" + argsstr + ";"
}
"""

// similar to call, except that any exception that 'f' throws is caught
// and displayed to stderr, then swallowed.
// also spawns a new 'stack' context.
// Like 'startAsync', but only keeps the last stack frame instead of
// copying everything.
fn native callCallback(f Lambda[Void]) Void"""
  runCallback(var_f, stack);
"""
