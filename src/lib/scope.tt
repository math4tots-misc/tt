// scope.tt

// Scope is just a deletable.
// A convenient way to tie callbacks to scopes.

class Scope {
  let callbacks List[Lambda[Void]];
}

fn new(Scope) Scope {
  return malloc(Scope, new(List[Lambda[Void]]));
}

fn delete(this Scope) Void {
  while (len(this.callbacks) > 0) {
    callCallback(this.callbacks.shift());
  }
}

fn onDelete(:Method, this Scope, callback Lambda[Void]) Void {
  this.callbacks.push(callback);
}


