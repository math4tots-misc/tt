// scope.tt

// Scope is just a deletable.
// A convenient way to tie callbacks to scopes.

class Scope {
  let callbacks List[Lambda[Void]];
}

fn new(Scope) Scope {
  return malloc(Scope, new(List[Lambda[Void]]));
}

fn delete(this Scope) Void {
  for (let i = 0; i < len(this.callbacks); i++) {
    callCallback(this.callbacks[i]);
  }
}

fn onDelete(:Method, this Scope, callback Lambda[Void]) Void {
  this.callbacks.push(callback);
}


