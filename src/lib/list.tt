// list.tt
// All functions related to dealing with lists.

class native List[$T];

fn native new(List[$T]) List[$T]"""
  return [];
"""

fn list($T) List[$T] {
  return new(List[$T]);
}

fn native len(x List[$T]) Int """
  return var_x.length;
"""

fn native __getitem__(xs List[$T], i Int) $T """
  if (var_i < 0 || var_i >= var_xs.length) {
    throw new Error("__getitem__ List out of bounds: i = " + var_i +
                    " xs.length = " + var_xs.length);
  }
  return var_xs[var_i];
"""

fn native __setitem__(xs List[$T], i Int, t $T) $T """
  if (var_i < 0 || var_i >= var_xs.length) {
    throw new Error("__setitem__ List out of bounds: i = " + var_i +
                    " xs.length = " + var_xs.length);
  }
  return var_xs[var_i] = var_t;
"""

fn repr(xs List[$T]) String {
  let str = "[";
  for (let i = 0; i < len(xs); i = i+1) {
    if (i > 0) {
      str = str + ", ";
    }
    str = str + repr(xs[i]);
  }
  str = str + "]";
  return str;
}

fn __eq__(xs List[$T], ys List[$T]) Bool {
  if (len(xs) != len(ys)) {
    return false;
  }
  let size = len(xs);
  for (let i = 0; i < size; i = i+1) {
    if (xs[i] != ys[i]) {
      return false;
    }
  }
  return true;
}

fn native push(:Method, xs List[$T], x $T) List[$T]"""
  var_xs.push(var_x);
  return var_xs;
"""

fn native pop(:Method, xs List[$T]) $T"""
  return var_xs.pop();
"""

fn native shift(:Method, xs List[$T]) $T"""
  return var_xs.shift();
"""

fn native unshift(:Method, xs List[$T], x $T) List[$T]"""
  var_xs.unshift(var_x);
  return var_xs;
"""

// For now, only strings are sortable, since that's how javascript's
// builtin array sorts them.
fn native sort(:Method, xs List[String]) List[String]"""
  var_xs.sort();
  return var_xs;
"""

fn native sort(:Method, xs List[$T], compare Lambda[Int, $T, $T]) List[$T]"""
  var_xs.sort((a, b) => var_compare(stack, a, b));
  return var_xs;
"""

fn sort(:Method, xs List[$T]) List[$T] {
  return xs.sort(fn(a $T, b $T) {
    if (a < b) {
      return -1;
    } else if (b < a) {
      return 1;
    }
    return 0;
  });
}

fn removeElementAtIndex(:Method, this List[$T], i Int) Void {
  this.splice(i, 1);
}

fn native splice(:Method, this List[$T], startIndex Int, count Int) Void"""
  var_this.splice(var_startIndex, var_count);
"""

