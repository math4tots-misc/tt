class native Promise[$T] "!Promise<$T>"

//// TODO: setTimeout(..., 0) doesn't actually give delay of 0ms, because
// the HTML5 spec sets this to 4ms for any value less than that (
// at a certain level of nesting).
// Google settimeout clamp.
// The todo here is to find a workaround that actually works with 0ms
// timeout.
fn native asyncSleep(timeInMilliseconds Int) Promise[Void]"""
  return newPromise(stack, (resolve, reject) => {
    setTimeout(() => {
      resolve();
    }, var_timeInMilliseconds);
  });
"""

fn native startAsync(promise Promise[$T]) Void"""
  markPromiseAwaited(var_promise);
  var_promise.then(result => {
    finalizePromise(var_promise);
  }, error => {
    finalizePromise(var_promise);
    throw error;
  }).catch(error => {
    const rstack = error.ttstackSnapshot || stack;
    displayErrorAndDie(rstack, error);
  });
"""

fn startAsync(f Lambda[Promise[$T]]) Void {
  startAsync(call(f));
}
