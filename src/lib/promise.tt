class native Promise[$T];
class native AsyncQueue[$T];

//// TODO: setTimeout(..., 0) doesn't actually give delay of 0ms, because
// the HTML5 spec sets this to 4ms for any value less than that (
// at a certain level of nesting).
// Google settimeout clamp.
// The todo here is to find a workaround that actually works with 0ms
// timeout.
fn native asyncSleep(timeInMilliseconds Int) Promise[Void]"""
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve();
    }, var_timeInMilliseconds);
  });
"""

fn native runFromSync(promise Promise[$T]) Void"""
  var_promise.then(result => null, error => {
    console.error(getStackTraceMessage(error.ttstack || stack));
    console.error(error);
    throw error;
  });
"""

fn native new(AsyncQueue[$T]) AsyncQueue[$T]"""
  return {items: [], listeners: []};
"""

fn native push(queue AsyncQueue[$T], t $T) Void"""
  if (var_queue.listeners.length > 0) {
    var_queue.listeners.shift()(t);
  } else {
    var_queue.items.push(t);
  }
"""

fn native asyncPop(queue AsyncQueue[$T]) Promise[$T]"""
  return new Promise((resolve, reject) => {
    if (var_queue.items.length > 0) {
      resolve(var_queue.items.shift());
    } else {
      var_queue.listeners.push(resolve);
    }
  });
"""
