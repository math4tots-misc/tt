// Like prelude, but specific to javascript target

class native Void "undefined"
class native Bool "boolean"
class native Int "number"
class native Float "number"
class native String "string"

fn native jsprint(x $T) Void"""
  console.log(var_x);
"""

fn native error(x String) Void """
  throw new TtError("Error: " + var_x);
"""

fn native __not__(x Bool) Bool """
  return !var_x;
"""

fn native __is__(x $T, y $T) Bool """
  return var_x === var_y;
"""

fn native __isnot__(x $T, y $T) Bool"""
  return var_x !== var_y;
"""

fn native __add__(x Int, y Float) Float """
  return var_x + var_y;
"""

fn native __add__(x Float, y Int) Float """
  return var_x + var_y;
"""

fn native __add__(x Float, y Float) Float """
  return var_x + var_y;
"""

fn native __add__(x String, y String) String """
  return var_x + var_y;
"""

fn native repr(x Bool) String """
  return "" + var_x;
"""

fn native repr(x Float) String """
  return "" + var_x;
"""

fn native getStackTraceMessage() String """
  return getStackTraceMessage(stack);
"""

fn native typestr($T) String """eval context => {
  const name = context.getTypeOfArgumentAtIndex(0).toString();
  return "\\n  return '" + name + "';";
}"""

fn native print(x String) Void """
  console.log(var_x);
"""
