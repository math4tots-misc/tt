// Like prelude, but specific to javascript target

fn native error(x String) Void """
  throw new TtError("Error: " + var_x);
"""

fn native __not__(x Bool) Bool """
  return !var_x;
"""

fn native __is__(x $T, y $T) Bool """
  return var_x === var_y;
"""

fn native __isnot__(x $T, y $T) Bool"""
  return var_x !== var_y;
"""

fn native __isnull__(x $T) Bool"""
  return var_x === null;
"""

fn native __isnotnull__(x $T) Bool"""
  return var_x !== null;
"""

fn native __add__(x Int, y Float) Float """
  return var_x + var_y;
"""

fn native __add__(x Float, y Int) Float """
  return var_x + var_y;
"""

fn native __add__(x Float, y Float) Float """
  return var_x + var_y;
"""

fn native __add__(x String, y String) String """
  return var_x + var_y;
"""

fn native repr(x Bool) String """
  return "" + var_x;
"""

fn native repr(x Float) String """
  return "" + var_x;
"""

fn native getStackTraceMessage() String """
  return getStackTraceMessage(stack);
"""

fn native typestr($T) String """eval context => {
  const name = context.getTypeOfArgumentAtIndex(0).toString();
  return "\\n  return '" + name + "';";
}"""

fn native print(x String) Void """
  console.log(var_x);
"""

// TODO: Make the error throw at instantiation time instead of at
// code generation phase -- make better error message
fn native malloc($T) $T """eval context => {
  const type = context.getTypeOfArgumentAtIndex(0);
  const cls = context.getClassFromType(type);
  if (cls.isNative) {
    throw new Error(
        "You can't use generic malloc on native classes: " +
        type.toString());
  }
  const attrstrs = [];
  for (const [name, attrcls] of cls.attrs) {
    attrstrs.push("aa" + name + ":" + context.getDefaultValue(attrcls));
  }
  return "\\n return {" + attrstrs.join(",") + "};";
}"""
