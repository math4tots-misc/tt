// canvaselement.tt

class native DomCanvas "!HTMLCanvasElement"

fn native getattr(this DomCanvas, :width) Int"""
  return var_this.width;
"""

fn native getattr(this DomCanvas, :height) Int"""
  return var_this.height;
"""

fn native setattr(this DomCanvas, :width, value Int) Int"""
  return var_this.width = var_value;
"""

fn native setattr(this DomCanvas, :height, value Int) Int"""
  return var_this.height = var_value;
"""

fn DomCanvas {
  fn native to(DomElement) DomElement"""
    return var_this;
  """

  fn onClick(handler Lambda[Void, DomMouseEvent]) Lambda[Void] {
    return this.to(DomElement).onClick(handler);
  }

  fn native getContext2d() DomCanvasContext2d"""
    return var_this.getContext('2d');
  """
}

fn DomElement {
  fn to(DomCanvas) DomCanvas {
    if (this.nodeName != "CANVAS") {
      error("Expected CANVAS element but found " + this.nodeName);
    }
    return this.unsafeCast(DomCanvas);
  }

  fn native unsafeCast(DomCanvas) DomCanvas"""
    return var_this;
  """
}
