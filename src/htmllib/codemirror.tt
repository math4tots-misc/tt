// codemirror.tt

class native CodeMirror;
class native CodeMirrorDoc;

fn native new(CodeMirror, jq Jquery) CodeMirror"""
  if (var_jq.prop("tagName") !== "TEXTAREA") {
    throw new Error("You need a textarea to create a CodeMirror instance");
  }
  const cm = CodeMirror.fromTextArea(var_jq[0], {
    lineNumbers: true,
    keyMap: "sublime",
    autoCloseBrackets: true,
    matchBrackets: true,
    showCursorWhenSelecting: true,
    theme: "monokai",
    tabSize: 2,
    viewportMargin: Infinity,
    readOnly: true,
    lineWrapping: true,
  });
  cm.setOption("extraKeys", {
    Tab: function(cm) {
      var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
      cm.replaceSelection(spaces);
    },
  });
  cm.setValue("No selected file");
  return cm;
"""

fn native new(CodeMirrorDoc, text String) CodeMirrorDoc"""
  return CodeMirror.Doc(var_text);
"""

fn new(CodeMirrorDoc) CodeMirrorDoc {
  return new(CodeMirrorDoc, "");
}

fn native swapDoc(cm CodeMirror, doc CodeMirrorDoc) CodeMirrorDoc"""
  return var_cm.swapDoc(var_doc);
"""

fn native setValue(doc CodeMirrorDoc, value String) Void"""
  var_doc.setValue(var_value);
"""

fn native getValue(doc CodeMirrorDoc) String"""
  return var_doc.getValue();
"""

fn native setReadonly(cm CodeMirror, value Bool) Void"""
  var_cm.setOption("readOnly", var_value);
"""

