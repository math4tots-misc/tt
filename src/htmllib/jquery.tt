// jquery.tt
// Some functions for manipulating the DOM
/*
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
*/

class native Jquery;

fn native new(Jquery, selector String) Jquery"""
  return $(var_selector);
"""

fn setId(:Method, jq Jquery, id String) Void {
  setAttr(jq, "id", var_id);
}

fn native append(:Method, jq Jquery, child Jquery) Void"""
  var_jq.append(var_child);
"""

fn native addClass(:Method, jq Jquery, cls String) Void"""
  var_jq.addClass(var_cls);
"""

fn native addCss(:Method, jq Jquery, key String, value String) Void"""
  var_jq.css(var_key, var_value);
"""

fn native show(:Method, jq Jquery) Void"""
  var_jq.show();
"""

fn native hide(:Method, jq Jquery) Void"""
  var_jq.hide();
"""

fn native setText(:Method, jq Jquery, text String) Void"""
  var_jq.text(var_text);
"""

fn native getText(:Method, jq Jquery) String"""
  return var_jq.text();
"""

fn native setAttr(:Method, jq Jquery, attrname String, val String) Void"""
  var_jq.attr(var_attrname, var_val);
"""

fn native getAttr(:Method, jq Jquery, attrname String) String"""
  return "" + var_jq.attr(var_attrname);
"""

fn native asyncReady(:Method, jq Jquery) Promise[Void]"""
  return newPromise(stack, (resolve, reject) => {
    var_jq.ready(() => resolve());
  });
"""

fn native asyncOnClick(:Method, jq Jquery) Promise[JqueryEvent]"""
  return newPromise(stack, (resolve, reject) => {
    var_jq.one("click", event => {
      resolve(event);
    });
  });
"""

// Registers the given callback for given event.
// Returns a callback that will undo the registration.
fn native on(:Method, jq Jquery,
             eventType String,
             callback Lambda[Void, JqueryEvent]) Lambda[Void]"""

  const callback =
      event => runCallback(stack => var_callback(stack, event), stack);

  var_jq.on(var_eventType, callback);

  return () => var_jq.off(var_eventType, callback);
"""

fn feed(:Method, jq Jquery,
        eventType String, queue AsyncQueue[JqueryEvent]) Void {
  final finalQueue = queue;

  final callback = fn(event JqueryEvent) {
    finalQueue.push(event);
  };

  final unregisterCallback = jq.on(eventType, callback);

  // Start an async 'thread' that will remove the callback once the
  // queue is deleted.
  startAsync(async() {
    await finalQueue.asyncOnDelete();
    call(unregisterCallback);
  });
}

fn events(:Method, jq Jquery, event String) AsyncQueue[JqueryEvent] {
  final queue = new(AsyncQueue[JqueryEvent]);
  jq.feed(event, queue);
  return queue;
}
