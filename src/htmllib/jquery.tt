// jquery.tt
// Some functions for manipulating the DOM

class native Jquery;

fn native new(Jquery, selector String) Jquery"""
  return $(var_selector);
"""

fn setId(:Method, jq Jquery, id String) Void {
  setAttr(jq, "id", var_id);
}

fn native append(:Method, jq Jquery, child Jquery) Void"""
  var_jq.append(var_child);
"""

fn native addClass(:Method, jq Jquery, cls String) Void"""
  var_jq.addClass(var_cls);
"""

fn native addCss(:Method, jq Jquery, key String, value String) Void"""
  var_jq.css(var_key, var_value);
"""

fn native setText(:Method, jq Jquery, text String) Void"""
  var_jq.text(var_text);
"""

fn native getText(:Method, jq Jquery) String"""
  return var_jq.text();
"""

fn native setAttr(:Method, jq Jquery, attrname String, val String) Void"""
  var_jq.attr(var_attrname, var_val);
"""

fn native getAttr(:Method, jq Jquery, attrname String) String"""
  return "" + var_jq.attr(var_attrname);
"""

fn native asyncReady(:Method, jq Jquery) Promise[Void]"""
  return newPromise(stack, (resolve, reject) => {
    var_jq.ready(() => resolve());
  });
"""

fn native asyncClick(:Method, jq Jquery) Promise[JqueryEvent]"""
  return newPromise(stack, (resolve, reject) => {
    var_jq.one("click", event => {
      resolve(event);
    });
  });
"""

