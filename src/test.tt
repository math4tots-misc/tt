
fn main() Void {
  //// Basic sanity checks
  {
    assert(true);
    assertFalse(false);
    assertFalse(!true);

    assert(1 == 1);
    assertFalse(1 == 2);
    assertFalse(1 != 1);
    assert(1 != 2);

    assert(2 + 2 == 4);
    assertEqual(2 + 2, 4);
    assertEqual(6 * 7, 42);
    assertEqual(repr(24), "24");

    assertEqual("hi", "hi");
  }

  //// is, is not
  {
    let x = malloc(Sample[Int], 0);
    let y = x;
    let z = malloc(Sample[Int], 0);
    assert(x is x);
    assert(x is y);
    assert(x is not z);
  }

  //// String literal
  {
    """
    Make sure that strings can be used as statement-level comments.
    """;
    assertEqual("\\" + "n", "\\n");
    assertEqual("\\" + "n", r"\n");
    assert("\\" + "n" != "\n");
  }

  //// String comparison
  {
    assert("a" < "b");
    assert("aa" < "b");
    assertFalse("abc" < "abc");
  }

  //// Global variables.
  assertEqual(globalInt, 55778);
  {
    assertEqual(globalInt, 55778);
    assertEqual(globalFloat, 88.88);
    globalInt = 15523;
    assertEqual(globalInt, 15523);
  }
  assertEqual(globalInt, 15523);

  //// malloc
  {
    final sample = malloc(Sample[Int], 5);
  }

  //// Class, get/set attributes
  {
    final sample = malloc(Sample[Int], 88);
    assertEqual(sample.t, 88);
    sample.t = 15;
    assertEqual(sample.t, 15);
  }

  //// Vararg functions
  {
    assertEqual(sum(1, 2, 3), 6);
    assertEqual(concatTypenames(Int, Float, String), "Int,Float,String");
    assertEqual(makeList(5, 6, 7, 8), [5, 6, 7, 8]);
  }

  //// Static blocks
  {
    assertEqual(valueChangedByStaticBlock, "new value");
    assertEqual(
      valueChangedByNativeStaticBlock,
      "new value set by native static block");
  }

  //// Tuple
  {
    assertEqual(tuple(1, "hi"), tuple(1, "hi"));
    assertFalse(tuple(1, "hi") == tuple(1, "hix"));

    let t = tuple(1.0, 2, "world");
    assertEqual(typestr(t), "Tuple[Float,Int,String]");

    assertEqual(t.get(:0), 1.0);
    assertEqual(t.get(:1), 2);
    assertEqual(t.get(:2), "world");

    t.set(:0, 5.0);
    assertEqual(t.get(:0), 5.0);

    assert(tuple(10, 5) < tuple(20, 10));
    assertFalse(tuple(20, 10) < tuple(20, 10));
    assertFalse(tuple(20, 10) > tuple(20, 10));
    assert(tuple(20, "b") > tuple(20, "a"));
  }

  //// Lambda
  {
    final f = fn(a Int, b Int) {
      return "a + b = " + str(a + b);
    };
    assertEqual(repr(f), "<Lambda[String,Int,Int] instance>");
    assertEqual(call(f, 5, 7), "a + b = 12");

    final g = makeLambda(Int, Float, String);
    assertEqual(repr(g), "<Lambda[Int,Int,Float,String] instance>");
    assertEqual(call(g, 0, 0.0, ""), 5);
  }

  //// Async
  {
    startAsync(asyncFunction());
  }

  //// Table
  {
    final table = new(Table[Int]);
    assert("x" not in table);
    assertEqual(len(table.getListOfKeys()), 0);
    table["x"] = 5;
    assertEqual(table["x"], 5);
    assertEqual(len(table.getListOfKeys()), 1);
    assertEqual(table, new(Table[Int], "x", 5));
    assertEqual(str(table), '{x:5}');
    assert("x" in table);
    table.discard("x");
    assert("x" not in table);
    assertEqual(len(table.getListOfKeys()), 0);

    // Test that if key appears more than once,
    // we only keep the last one.
    final t = new(Table, "x", "aa", "y", "b", "x", "ff");
    assertEqual(t, new(Table, "x", "ff", "y", "b"));
    assertEqual(t["x"], "ff");
    assertEqual(len(t.getListOfKeys()), 2);
  }

  //// Xmap
  {
    final map = new(Xmap[Int, Int]);
    assert(41 not in map);
    assertEqual(len(map), 0);
    map[41] = 415;
    assertEqual(map[41], 415);
    assertEqual(len(map), 1);
    assertEqual(map, new(Xmap, 41, 415));
    assert(map != new(Xmap, 41, 415, 11, 4));
    assertEqual(str(map), "new(Xmap, 41,415)");
    assert(41 in map);
    map.discard(41);
    assertEqual(len(map), 0);
    final t = new(Xmap, "x", "aa", "y", "b", "x", "ff");
    assertEqual(t, new(Xmap, "x", "ff", "y", "b"));
    assertEqual(t["x"], "ff");
    assertEqual(len(t), 2);
    assertEqual(str(t), "new(Xmap, \"x\",\"ff\", \"y\",\"b\")");
  }

  //// List
  {
    let xs = new(List[Int]);
    push(:Method, xs, 5);
    assertEqual(xs, [5]);
    push(:Method, xs, 6);
    assertEqual(xs, [5, 6]);
    assertEqual(xs[1], 6);
    assertEqual(pop(:Method, xs), 6);
    assertEqual(xs, [5]);

    let ys = ["a", "z", "b", "e", "d"];
    assert(ys is ys.sort());
    assertEqual(ys, ["a", "b", "d", "e", "z"]);

    {
      let xs = ["a", "b", "c", "d", "e"];
      xs.removeElementAtIndex(2);
      assertEqual(xs, ["a", "b", "d", "e"]);
    }

    {
      let xs = ["a", "b", "c", "d", "e"];
      xs.splice(1, 2);
      assertEqual(xs, ["a", "d", "e"]);
    }

    {
      let xs = [1, 2, 3];
      assert(xs is xs.unshift(5));
      assertEqual(xs, [5, 1, 2, 3]);
      assertEqual(xs.shift(), 5);
      assertEqual(xs.shift(), 1);
      assertEqual(xs, [2, 3]);
    }

    assertEqual(list(Int).sort(), list(Int));

    {
      final xs = [5, 6, 1, 2];
      assertEqual(xs.sort(), [1, 2, 5, 6]);
    }
  }

  //// Method syntax
  {
    // syntactic sugar on function calls
    // push(:Method, xs, 5) is semantically equivalent to xs.push(5)
    let xs = new(List[String]).push("a").push("b");
    assertEqual(xs, ["a", "b"]);
    xs.push("cc");
    assertEqual(xs, ["a", "b", "cc"]);
    assertEqual(xs.pop(), "cc");
    assertEqual(xs, ["a", "b"]);
  }

  //// String += operator
  {
    let s = "a";
    s += "bb";
    assertEqual(s, "abb");
    s += "c";
    assertEqual(s, "abbc");
  }

  //// int/float
  {
    let i = 0;
    assertEqual(i, 0);
    i++;
    assertEqual(i, 1);
    i++;
    assertEqual(i, 2);
    i--;
    assertEqual(i, 1);
    i--;
    assertEqual(i, 0);
    i--;
    assertEqual(i, -1);

    assertEqual(5 - 3, 2);

    assertEqual(int(5.7), 5);
  }

  //// negative int
  {
    assertEqual(0 - 5, -5);
  }

  //// String repr
  {
    assertEqual(repr("hello world!"), '"hello world!"');
    assertEqual(repr("\n"), r'"\n"');
    assertEqual(repr("\\"), r'"\\"');
  }

  //// __mod__(Int,Int)
  {
    assertEqual(5 % 2, 1);
    assertEqual(7 % 3, 1);
    assertEqual(10 % 3, 1);
    assertEqual(12 % 3, 0);
  }

  //// while statements
  {
    let i = 0;
    while (i < 10) {
      i++;
    }
    assertEqual(i, 10);

    i = 0;
    while (true) {
      if (i > 5) {
        break;
      }
      i++;
    }
    assertEqual(i, 6);

    let items = new(List[Int]);
    for (let i = 0; i < 5; i++) {
      if (i%2 == 0) {
        continue;
      }
      items.push(i);
    }
    assertEqual(items, [1, 3]);
  }

  //// async lambda functions
  {
    final someList = new(List[Int]);
    startAsync(async() {
      assertEqual(someList, new(List[Int]));
      await asyncSleep(10);
      assertEqual(someList, [151]);
    });
    startAsync(async() {
      someList.push(151);
    });
  }

  //// Maybe
  {
    let a = new(Maybe[Int]);
    assert(a.isNothing());
    assertFalse(a.isSomething());
    assertEqual(a, new(Maybe[Int]));
    assertEqual(a, nothing(Int));
    assertEqual(repr(a), "new(Maybe[Int])");
    a = new(Maybe, 5);
    assertFalse(a.isNothing());
    assert(a.isSomething());
    assertEqual(a.get(), 5);
    assertEqual(a, new(Maybe, 5));
    assertFalse(a == new(Maybe, 3));
    assertEqual(a, just(5));
    assertEqual(repr(a), "new(Maybe,5)");
  }

  //// Json
  {
    let a = new(Json, "a");
    let b = new(Json, [1, 2, 3]);

    assertEqual(b.to(List[Float]), [1.0, 2.0, 3.0]);
    assertEqual(b.to(List[Int]), [1, 2, 3]);

    let c = new(Json, 15.2);
    assertEqual(repr(c), "15.2");

    let d = new(Json, new(Table, "a", 4));
    assertEqual(repr(d), '{"a":4}');

    // Test the 'to(Json)' method.
    assertEqual(d, new(Table, "a", 4).to(Json));
    assertEqual(a, "a".to(Json));

    {
      let a = new(Json,
          "a", 4,
          "b", [1, 2, 3, 4, 5],
          "c", new(Table, "5", "hello world!"),
      );

      // conversion to JSON should be smooth,
      assertEqual(a["b"], [1, 2, 3, 4, 5].to(Json));

      // conversion from JSON should also be smooth
      assertEqual(a["b"].to(List[Int]), [1, 2, 3, 4, 5]);

      assertEqual(a["c"].to(Table[String]), new(Table, "5", "hello world!"));
    }
  }

  //// Symbol test
  {
    assertEqual(symbolTest(:1), 11);
    assertEqual(symbolTest(:2), 33);
    assertEqual(symbolTest(:abc), 566);
    assertEqual(symbolTest(:Abc), 14);
  }

  //// auto test
  {
    let x = new(List[Int]);
    {
      auto f = new(ExampleDeletable, x, 14);
    }
    assertEqual(x, [14]);
  }

  //// keyword args test
  // With these, the test is just that they compile.
  {
    testKeywordArgs("a", "b");
    testKeywordArgs("a", otherName: "b");
    testKeywordArgs(someName: "a", "b");
    testKeywordArgs(someName: "a", otherName: "b");
    // TODO: if an 'assertThrows' compile time macro becomes available,
    // should check that invalid keyword names throw an error.
    // #assertThrows testKeywordArgs(asdf: "a", "b");

    "a".testMethodKeywordArgs("b", "c");
    "a".testMethodKeywordArgs("b", otherName: "c");
    "a".testMethodKeywordArgs(someName: "b", "c");
    "a".testMethodKeywordArgs(someName: "b", otherName: "c");
  }

  //// new method definition syntax
  {
    assertEqual("hi".randomMethodOnString(5), 2 + 5);
  }

  //// for in loop
  {
    final xs = list(Int);
    for x in [366, 34, 18] {
      xs.push(x);
    }
    assertEqual(xs, [366, 34, 18]);
  }
  {
    final xs = list(Int);
    for x in range(5) {
      xs.push(x);
    }
    assertEqual(xs, [0, 1, 2, 3, 4]);
  }
  {
    final xs = list(Int);
    for x in range(5, 8) {
      xs.push(x);
    }
    assertEqual(xs, [5, 6, 7]);

    /*for (x, y) in zip(range(5, 10), range(20, 30)) {
      let tuple(z, a, d ...rest) = x;
    }*/
  }

  //// setattr/getattr shims
  {
    final e = malloc(ExSetattr);
    assertEqual(e.foo, "foo attr");
    assertEqual(e.foo = 145, "145");
  }

  print("synchronous main finished!");
}

class Sample[$T] {
  let t $T;
}

let globalInt Int = 55778;
let globalFloat Float = 88.88;

fn concatTypenames($X) String {
  return typestr($X);
}

fn concatTypenames($X, ...Rest) String {
  return typestr($X) + "," + concatTypenames(...Rest);
}

fn sum(x Int) Int {
  return x;
}

fn sum(x Int, ...args Args) Int {
  return x + sum(...args);
}

fn makeList(x Int, ...args Args) List[Int] {
  return [x, ...args];
}

let valueChangedByStaticBlock = "hello world";
let valueChangedByNativeStaticBlock = "hello world";

static {
  let varThatShouldNotClashWithOtherStaticBlock = 77;

  assertEqual(valueChangedByStaticBlock, "hello world");
  valueChangedByStaticBlock = "new value";
}

static {
  let varThatShouldNotClashWithOtherStaticBlock = 88;
}

static native """
  var_valueChangedByNativeStaticBlock =
      "new value set by native static block";
"""

fn makeLambda(...Args) Lambda[Int, ...Args] {
  return fn(...args Args) {
    return 5;
  };
}

fn async asyncFunction() Void {
  print("I'm at the beginning of asyncFunction");

  //// Scope onDelete
  {
    let xs = new(List[Int]);
    {
      auto scope = new(Scope);
      scope.onDelete(fn() {
        xs.push(5);
      });
      assertEqual(xs, new(List[Int]));
    }
    assertEqual(xs, [5]);
    {
      final scope = new(Scope);
      scope.onDelete(fn() {
        xs.push(15);
      });
      delete(scope);
      await scope.asyncOnDelete();
    }
    assertEqual(xs, [5, 15]);

    {
      final scope = new(Scope);
      scope.onDelete(fn() {
        xs.push(25);
      });
      startAsync(async() {
        await asyncSleep(10);
        delete(scope);
      });
      await scope.asyncOnDelete();
    }
    assertEqual(xs, [5, 15, 25]);

    // Make scope1 own scope2.
    // And when scope1 is deleted, make sure that scope2 was
    // deleted as well.
    {
      auto scope1 = new(Scope);
      final scope2 = new(Scope);
      scope1.own(scope2);
      scope2.onDelete(fn() {
        xs.push(35);
      });
    }
    assertEqual(xs, [5, 15, 25, 35]);

    xs = [5];
    {
      final scope = new(Scope);
      scope.onDelete(fn() {
        xs.push(15);
      });
      startAsync(async() {
        await scope.asyncAfterDelete();
        xs.push(25);
      });
      delete(scope);
      await scope.asyncAfterDelete();
    }
    assertEqual(xs, [5, 15, 25]);
  }

  await asyncSleep(1000);

  // asyncSleep(1000);
  """Uncommenting the above line should produce a message like the
  following:

  Error: await or runAsync not used on some promise(s)
  Most recent call last:
    main()              in 'test.tt'           line 97
    asyncFunction()     in 'test.tt'           line 158
  """;

  // error("Hoi");
  // Uncommenting the above line should show a nice stack trace like:
  // Most recent call last:
  // main()              in 'test.tt'           line 97
  // asyncFunction()     in 'test.tt'           line 158

print("I'm at the end of asyncFunction (after await asyncSleep)");
}

fn symbolTest(:1) Int {
  return 11;
}

fn symbolTest(:2) Int {
  return 33;
}

fn symbolTest(:abc) Int {
  return 566;
}

fn symbolTest(:Abc) Int {
  return 14;
}

class ExampleDeletable {
  let xs List[Int];
  let x Int;
}

fn new(ExampleDeletable, xs List[Int], x Int) ExampleDeletable {
  return malloc(ExampleDeletable, xs, x);
}

fn delete(e ExampleDeletable) Void {
  e.xs.push(e.x);
}

fn testKeywordArgs(someName String, otherName String) Void {}

fn testMethodKeywordArgs(:Method, this String,
                         someName String, otherName String) Void {}

fn String {
  fn randomMethodOnString(x Int) Int {
    return len(this) + x;
  }
}

class ExSetattr {
}

fn getattr(this ExSetattr, :foo) String {
  return "foo attr";
}

fn setattr(this ExSetattr, :foo, val Int) String {
  return val.to(String);
}

