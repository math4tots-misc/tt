class A {
  string amethod() {
    return "Inside A!";
  }
}

class Foo extends A {
  string bar(int k) {
    return "x = " + str(k);
  }
  void err() {
    error("Erroring inside Foo.err");
  }
}

int varForStatic;

static {
  print("inside static block -- should come before anything else");
  assertEqual(0, varForStatic);
  varForStatic = 1584;
}

interface Interf {
  int interfmeth(string x);
}

interface Interf2 {
  int interfmeth();
}

class B implements Interf {
  int interfmeth(string x) { return 1545; }
}

int main() {
  asyncNonWaiting();
  asyncTrivialWaiting();
  asyncMain();
  print("Exiting main");
}

async void asyncNonWaiting() {
  // This async function doesn't await on anything.
  // This means that if we followed, e.g. C# async behavior,
  // this would execute fully before 'main' was finished

  // NOTE: At first I thought it would be more intuitive to always queue
  // up promises until after the current context finished instead of
  // running as much as you can until the first await that actually made
  // you wait.
  // However, I realized that the C# approach gives more flexibility:
  // if I want it to wait until the current context is finished,
  // I can always insert the line:
  //   await asyncMoment();
  // and it will have the same effect.
  // There's no way to get the reverse if you're always queued afterwards
  // by default.

  print("Inside asyncNonWaiting");
}

async void asyncTrivialWaiting() {
  // This should always come after "main" has exited.
  await asyncMoment();
  print("Exiting asyncTrivialWaiting");
}

async void asyncMain() {
  assert(true);
  assert(not false);
  assertEqual(15, 15);
  assertEqual(15, 12 + 3);
  assertEqual(36, 12 * 3);
  assertEqual(-129, 13 - 142);
  assertEqual("Hello", 'Hello');
  List xs = [];
  for (int i = 3; i < 7; i++) {
    xs.push(i);
  }
  assertEqual([3, 4, 5, 6], xs);
  assertEqual("x = 125", Foo().bar(125));
  assertEqual("Inside A!", Foo().amethod());

  Lambda f = (int x) => 2*x + 1;
  assertEqual(11, f.call([5]));

  string message = assertThrow(() => {
    int x = 5;
    Object y = x;
    string z = y;
  });

  assertThrow(() => Foo().err());

  assertWithMessage(
      message.startsWith("Error: Int cannot be cast to String"), message);

  Promise promise = asyncFunc();
  assertEqual("<Promise instance>", str(promise));
  assertEqual(527, await promise);

  {
    // Explicit casting through the 'as' operator.
    Object x = 5;
    assertEqual(10, 5 + x as int);
  }

  {
    FloatVector xs = float[1.1, 2.1, 3.1, 4.1, 5.2];
    assertEqual("float[1.1, 2.1, 3.1, 4.1, 5.2]", str(xs));
    assertEqual(5, len(xs));
  }

  {
    B b = B();
    Interf interf = b;
    assertEqual(1545, interf.interfmeth("hi"));
  }

  assertEqual(1584, varForStatic);

  print("tests pass!");
}

async int asyncFunc() {
  int i = await anotherAsyncFunc();
  return 512 + i;
}

async int anotherAsyncFunc() {
  await asyncSleep(10);
  return 15;
}

